# post_comment.py
# Posts AI-generated diff explanations and risk scores as comments on GitHub PRs

import os
import requests
import sys
import json
from dotenv import load_dotenv
from explain_diff import summarize_diff
from risk_score import get_risk_score

load_dotenv()

# GitHub API configuration
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPOSITORY = os.getenv("GITHUB_REPOSITORY")  # format: owner/repo
GITHUB_PR_NUMBER = os.getenv("GITHUB_PR_NUMBER")

def post_github_comment(comment_body: str, pr_number: int = None, repo: str = None, token: str = None) -> bool:
    """
    Post a comment to a GitHub PR
    
    Args:
        comment_body: The comment text to post
        pr_number: PR number (defaults to GITHUB_PR_NUMBER env var)
        repo: Repository in format owner/repo (defaults to GITHUB_REPOSITORY env var)
        token: GitHub token (defaults to GITHUB_TOKEN env var)
    
    Returns:
        True if successful, False otherwise
    """
    # Use provided values or fall back to environment variables
    pr_number = pr_number or GITHUB_PR_NUMBER
    repo = repo or GITHUB_REPOSITORY
    token = token or GITHUB_TOKEN
    
    if not all([pr_number, repo, token]):
        print("‚ùå Missing required GitHub configuration:")
        print(f"   PR Number: {pr_number}")
        print(f"   Repository: {repo}")
        print(f"   Token: {'‚úì' if token else '‚úó'}")
        return False
    
    # GitHub API endpoint
    api_url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
    
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json",
        "Content-Type": "application/json"
    }
    
    payload = {
        "body": comment_body
    }
    
    try:
        response = requests.post(api_url, headers=headers, json=payload)
        
        if response.status_code == 201:
            print(f"‚úÖ Comment posted successfully to PR #{pr_number}")
            return True
        else:
            print(f"‚ùå Failed to post comment: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error posting comment: {e}")
        return False

def format_diff_analysis(diff_text: str) -> str:
    """
    Generate a formatted comment with diff explanation and risk score
    """
    print("üîç Analyzing diff...")
    
    # Get AI explanation
    explanation = summarize_diff(diff_text)
    
    # Get risk score
    risk_data = get_risk_score(diff_text)
    
    # Format the comment
    comment = f"""## ü§ñ AI Code Review

**Summary:** {explanation}

**Risk Assessment:**
- **Score:** {risk_data['score']}/10
- **Reason:** {risk_data['reason']}

---
*Generated by [DiffUse](https://github.com/your-repo/diffuse) - AI-powered code diff analysis*
"""
    
    return comment

def main():
    """
    Main function to handle different use cases
    """
    if len(sys.argv) < 2:
        print("Usage:")
        print("  python post_comment.py <diff_file>")
        print("  python post_comment.py --stdin")
        print("  python post_comment.py --test")
        print("\nEnvironment variables needed:")
        print("  GITHUB_TOKEN - GitHub personal access token")
        print("  GITHUB_REPOSITORY - Repository in format owner/repo")
        print("  GITHUB_PR_NUMBER - PR number to comment on")
        sys.exit(1)
    
    # Handle different input methods
    if sys.argv[1] == "--stdin":
        # Read diff from stdin (for GitHub Actions)
        diff_text = sys.stdin.read()
    elif sys.argv[1] == "--test":
        # Use sample diff for testing
        diff_text = """diff --git a/app.py b/app.py
index 83db48f..f7353ee 100644
--- a/app.py
+++ b/app.py
@@ -10,6 +10,9 @@ def login_user(request):
-    # authenticate user
-    ...
+    # authenticate user with additional logging
+    log_attempt(request)
+    if request.user.is_admin:
+        bypass_2fa()
+    ...
"""
    else:
        # Read diff from file
        try:
            with open(sys.argv[1], 'r') as f:
                diff_text = f.read()
        except FileNotFoundError:
            print(f"‚ùå File not found: {sys.argv[1]}")
            sys.exit(1)
    
    if not diff_text.strip():
        print("No diff content to analyze")
        sys.exit(0)
    
    # Generate the comment
    comment = format_diff_analysis(diff_text)
    
    # Post the comment
    if post_github_comment(comment):
        print("üéâ Analysis complete and comment posted!")
    else:
        print("‚ùå Failed to post comment")
        sys.exit(1)

if __name__ == "__main__":
    main()
